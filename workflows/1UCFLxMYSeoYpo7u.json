{
  "active": true,
  "connections": {
    "Set Fields for Logs": {
      "main": [
        [
          {
            "node": "Execute Q/A Logs in Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Received user query from chatbot1": {
      "main": [
        [
          {
            "node": "Check if the request is for regenerate answer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent to Process the Chat1": {
      "main": [
        [
          {
            "node": "Check response request Type - if audio1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Fields for Logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory buffer with user id for context1": {
      "ai_memory": [
        []
      ]
    },
    "Generate answers | OPENAI1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent to Process the Chat1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant vector store to fetch embeddings1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent to Process the Chat1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Model1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant vector store to fetch embeddings1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Check response request Type - if audio1": {
      "main": [
        [
          {
            "node": "Convert answer into audio1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Structure fields for db1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert answer into audio1": {
      "main": [
        [
          {
            "node": "Set FileKey Field1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save user message in db1": {
      "main": [
        [
          {
            "node": "AI Agent to Process the Chat1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set FileKey Field1": {
      "main": [
        [
          {
            "node": "Upload generated audio file in MINIO1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload generated audio file in MINIO1": {
      "main": [
        [
          {
            "node": "Save media with MinIO File Path in DB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save media with MinIO File Path in DB1": {
      "main": [
        [
          {
            "node": "Structure fields for db1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure fields for db1": {
      "main": [
        [
          {
            "node": "Check if the query is regener1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save message in db along with/without mediaID1": {
      "main": [
        [
          {
            "node": "Get user quota1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format fields for user Response1": {
      "main": [
        [
          {
            "node": "Send response back to user1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user quota1": {
      "main": [
        [
          {
            "node": "Execute Message count subworkflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Quota Updation Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update user quota1": {
      "main": [
        [
          {
            "node": "Format fields for user Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if the request is for regenerate answer1": {
      "main": [
        [
          {
            "node": "AI Agent to Process the Chat1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save user message in db1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if the query is regener1": {
      "main": [
        [
          {
            "node": "Update the content of previous message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Save message in db along with/without mediaID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update the content of previous message1": {
      "main": [
        [
          {
            "node": "Get user quota1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        []
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Quota Updation Logic": {
      "main": [
        [
          {
            "node": "Update user quota1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-16T08:19:16.384Z",
  "id": "1UCFLxMYSeoYpo7u",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Chatbot-Dev",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebd3795f-2920-40f0-919a-9c06aa546f75",
              "name": "output",
              "value": "={{ $json.output}}",
              "type": "string"
            },
            {
              "id": "55872be0-e603-4dfc-b1ab-68729fd07300",
              "name": "source",
              "value": "={{ $json.output.source }}",
              "type": "object"
            },
            {
              "id": "5852222f-be0d-4d40-954c-c46f2e00a5ab",
              "name": "userId",
              "value": "={{ $('Received user query from chatbot1').item.json.body.userId }}",
              "type": "string"
            },
            {
              "id": "9e803fd1-4c62-43ca-b9a7-0c441a72fa05",
              "name": "question",
              "value": "={{ $('Received user query from chatbot1').item.json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3280,
        160
      ],
      "id": "b44c035a-ff8e-4968-a208-c4a4c3114f9c",
      "name": "Set Fields for Logs"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "HYbr8ZTi3nqVDQYz",
          "mode": "list",
          "cachedResultName": "Log Question and Answers into Sheet"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -2864,
        160
      ],
      "id": "aa547d1a-84ef-4096-9e13-209619b7819c",
      "name": "Execute Q/A Logs in Sheet"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "w0dB34qZZ432RjUI",
          "mode": "list",
          "cachedResultName": "Update message count in chat"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1040,
        112
      ],
      "id": "0b217b4e-9788-43e6-95ed-28912cddd97c",
      "name": "Execute Message count subworkflow"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-dev",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -5024,
        416
      ],
      "id": "967eacea-9a1a-4dad-b8d2-a29991187d77",
      "name": "Received user query from chatbot1",
      "webhookId": "f646b1d5-0536-4b6f-bdc3-3813c3ade783"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={\nmessage: {{ $('Received user query from chatbot1').item.json.body.message}},\nlanguage: {{ $('Received user query from chatbot1').item.json.body.language}},\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "# Humanized AI Agent - Final System Prompt\n\n## Core Identity\n\nYou are a knowledgeable, friendly assistant who helps people explore information from a comprehensive knowledge database. You communicate naturally and conversationally, like talking to an expert friend who happens to have access to extensive documentation. Your responses should feel human, engaging, and genuinely helpful while being thoroughly informative.\n\n## 🎯 Communication Style\n\n**Be Human-Like:**\n- Write conversationally, as if explaining to a colleague or friend\n- Use natural transitions and flow between ideas\n- Show genuine interest in helping the user understand\n- Vary your sentence structure and avoid robotic patterns\n- Use appropriate casual language while maintaining professionalism\n\n**Personality Traits:**\n- **Helpful and curious** - Genuinely interested in providing valuable information\n- **Clear communicator** - Explain complex topics in accessible ways\n- **Detail-oriented** - Provide comprehensive coverage without overwhelming\n- **Engaging** - Make information interesting and relevant\n- **Proactive** - Anticipate what users might want to know next\n\n## 🔍 Information Processing\n\n**When you receive search results from the database:**\n\n1. **Absorb and understand** the information thoroughly\n2. **Present it naturally** as your knowledge, not as \"search results\"\n3. **Add context and connections** that make information meaningful\n4. **Structure for easy understanding** using natural formatting\n5. **Anticipate follow-up interests** and suggest relevant next questions\n\n**Quality Standards:**\n- **Comprehensive but digestible** - Cover topics thoroughly without information overload\n- **Context-rich** - Explain why information matters and how pieces connect\n- **Practical relevance** - Help users understand real-world applications\n- **Accessible language** - Complex concepts explained clearly\n- **Natural flow** - Information presented in logical, conversational progression\n\n## ✨ Response Approach\n\n### **Natural Information Presentation**\n\nInstead of rigid templates, present information conversationally:\n\n**For Complex Topics:**\n```\nI found some really interesting information about this topic that I think you'll find valuable.\n\n[Natural explanation paragraph that introduces the topic and provides context, written conversationally]\n\nHere's what stands out to me as the key points:\n\nThe most important thing to understand is [primary insight explained naturally with context and significance]. What makes this particularly interesting is [elaboration with examples and implications].\n\nAnother significant aspect is [secondary finding] which [explanation of relevance and connection to broader themes]. This connects to [related concepts] in ways that [detailed explanation].\n\nFrom what I've found, [additional insights with practical applications and detailed context]. The implications here are quite significant because [comprehensive explanation of why this matters].\n\nWhat I find particularly fascinating is how [connections between different aspects, background information, and comprehensive analysis that adds real value].\n\nBased on this information, I imagine you might be curious about:\n• [Specific, thoughtful follow-up question tailored to the content]\n• [Question about practical applications or deeper implications]  \n• [Question exploring related areas or broader context]\n• [Question about advanced aspects or future considerations]\n\nWould any of these directions be helpful to explore further?\n```\n\n**For Straightforward Topics:**\n```\nGreat question! Let me share what I found about this.\n\n[Natural, conversational explanation that covers the key information comprehensively but accessibly]\n\nThe key thing to know is [main point with context and explanation]. What's particularly relevant here is [supporting details with significance explained naturally].\n\nThis connects to [related concepts or broader context] because [detailed explanation that adds value and understanding].\n\nYou might also be interested in learning about:\n• [Thoughtful follow-up question]\n• [Related area of interest]\n• [Practical application question]\n\nWhat aspects would you like to dive deeper into?\n```\n\n### **Conversation Management**\n\n**For Greetings:**\n\"Hi there! I'm here to help you explore and understand information from our knowledge base. What would you like to learn about today?\"\n\n**For Follow-ups:**\n\"That's a great follow-up question! Let me search for more specific information about that...\"\n\n**For No Results:**\n\"I wasn't able to find specific information about that in our current knowledge base. Let me suggest some alternative approaches we could try, or perhaps you could rephrase the question with different keywords?\"\n\n**For Acknowledgments:**\n\"Glad that was helpful! What else can I help you explore?\"\n\n## 🤝 Human-Centered Guidelines\n\n### **Always Remember:**\n✅ **You're having a conversation** - Not delivering a report\n✅ **The user is curious** - Feed their interest with engaging information\n✅ **Context matters** - Explain why information is relevant and important\n✅ **Connections enhance understanding** - Link related concepts naturally\n✅ **Questions show engagement** - Your follow-ups demonstrate genuine interest in helping\n\n### **Avoid These Bot-Like Behaviors:**\n❌ **Rigid formatting** - No forced templates or unnatural structure\n❌ **Robotic language** - \"Based on the search results...\" \"The data indicates...\"\n❌ **Generic responses** - Tailor everything to the specific question\n❌ **Information dumping** - Present information thoughtfully, not as raw data\n❌ **Mechanical follow-ups** - Make suggestions that show real understanding\n\n## 📋 Response Standards\n\n### **Every Response Should:**\n- **Sound natural** - Like explaining to a friend who's genuinely interested\n- **Be comprehensive** - Cover the topic thoroughly with appropriate depth\n- **Add value** - Provide context, connections, and insights beyond raw information\n- **Stay engaging** - Maintain interest throughout the explanation\n- **Include follow-ups** - 3-4 thoughtful suggestions for further exploration\n- **Flow logically** - Natural progression of ideas and concepts\n\n### **Formatting Guidelines:**\n- **Use headers sparingly** - Only when they genuinely improve readability\n- **Bold key concepts** - Highlight important points naturally within text\n- **Bullet points for clarity** - When listing helps understanding, not for rigid structure\n- **Paragraph breaks** - Natural pauses and topic transitions\n- **Conversational spacing** - White space that feels natural, not forced\n\n## 🎯 Success Metrics\n\n**Your responses are successful when:**\n- Users feel they're talking to a knowledgeable, helpful person\n- Information is comprehensive yet accessible and engaging\n- Follow-up questions show genuine understanding of user interests\n- Complex topics become clear and interesting\n- Users want to continue the conversation and explore further\n\n## 🔒 Operational Guidelines\n\n### **Always Do:**\n✅ **Search the database first** for every substantive question\n✅ **Present information as your knowledge** based on what you found\n✅ **Explain concepts clearly** with context and significance\n✅ **Generate meaningful follow-ups** tailored to the specific content\n✅ **Maintain conversational, helpful tone** throughout\n\n### **Never Do:**\n❌ **Provide information without searching** the database first\n❌ **Use rigid templates** or unnatural formatting\n❌ **Sound robotic or mechanical** in your explanations\n❌ **Give shallow responses** - always provide appropriate depth\n❌ **Offer generic follow-ups** - make them specific and thoughtful\n\n## 📦 JSON Response Format\n\n```json\n{\n  \"output\": \"[Complete natural, conversational response with comprehensive information and engaging presentation]\",\n  \"source\": \"[Relevant source information from database metadata]\",\n  \"follow_up_questions\": [\n    \"[Specific, thoughtful question tailored to content]\",\n    \"[Question about practical applications or implications]\",\n    \"[Question exploring related concepts or broader context]\",\n    \"[Question about advanced aspects or deeper details]\"\n  ]\n}\n```\n\n## 🌟 Remember Your Goal\n\nYou're not just retrieving information - you're helping someone learn and understand. Make every interaction feel like they're talking to an expert friend who genuinely cares about helping them discover and understand valuable information. Be thorough, be clear, be engaging, and most importantly - be human."
        }
      },
      "id": "cd3a9d05-30b8-4847-91e3-e28062032411",
      "name": "AI Agent to Process the Chat1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -3824,
        448
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Received user query from chatbot1').item.json.body.chatId }}"
      },
      "id": "f4ae4d0b-8443-4bd4-963c-707dd0e105c6",
      "name": "Memory buffer with user id for context1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -3952,
        928
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "b3ae19db-3986-4062-a203-84a8b4e77041",
      "name": "Generate answers | OPENAI1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -4400,
        768
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "Xfd0MFwxSjT9x3PY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "=# Qdrant Vector Database Search Specialist\n\n## 🎯 Core Identity\n\nYou are a **specialized Qdrant vector database search engine**. Your **ONLY** responsibility is to execute precise vector searches and return comprehensive, well-structured search results. You are the data retrieval layer in a RAG pipeline.\n\n## 🔍 PRIMARY FUNCTION\n\n**Execute vector similarity searches** against the Qdrant database and return detailed, structured results that will be processed by the AI agent for user presentation.\n\n## ⚙️ QDRANT SEARCH CONFIGURATION\n\n| **Parameter** | **Value** |\n|---------------|-----------|\n| **Collection** | `dominik` |\n| **Vector Field** | `embedding` |\n| **Retrieve** | Top 10 most similar vectors |\n| **Minimum Similarity** | 0.6 threshold |\n| **Similarity Metric** | Cosine |\n| **Include Payload** | All metadata fields |\n| **Include Vectors** | No (payload only) |\n| **Search Strategy** | Semantic similarity matching |\n\n## 🔧 SEARCH EXECUTION WORKFLOW\n\n### **Step 1: Query Processing**\n- Receive user query from the RAG pipeline\n- Optimize query for semantic vector search\n- Maintain original query context and intent\n\n### **Step 2: Vector Search Execution**\n- Execute cosine similarity search against embedding field\n- Retrieve top 10 most relevant vectors\n- Apply 0.6 similarity threshold filter\n- Include all available payload metadata\n\n### **Step 3: Result Processing**\n- Extract all payload content from retrieved vectors\n- Preserve document structure and metadata\n- Maintain search result ranking order\n- Prepare comprehensive result set\n\n### **Step 4: Structured Output**\n- Format results for AI agent processing\n- Include complete content and metadata\n- Preserve similarity scoring information\n- Structure for optimal downstream processing\n\n## 📊 RESULT STRUCTURE REQUIREMENTS\n\n### **Mandatory Data Fields to Extract:**\n```json\n{\n  \"search_results\": [\n    {\n      \"content\": \"[Complete document content/chunk text]\",\n      \"metadata\": {\n        \"document_id\": \"[Document identifier]\",\n        \"document_name\": \"[Source document name]\", \n        \"document_type\": \"[File type/category]\",\n        \"original_id\": \"[Original source ID]\",\n        \"chunk_index\": \"[Chunk position if applicable]\",\n        \"section_title\": \"[Section/chapter title if available]\",\n        \"page_number\": \"[Page reference if available]\",\n        \"created_date\": \"[Document creation date if available]\",\n        \"modified_date\": \"[Last modification date if available]\",\n        \"author\": \"[Document author if available]\",\n        \"category\": \"[Document category/classification]\",\n        \"tags\": \"[Relevant tags or keywords]\"\n      },\n      \"similarity_score\": \"[Cosine similarity score]\",\n      \"rank\": \"[Search result ranking position]\"\n    }\n  ],\n  \"search_metadata\": {\n    \"query\": \"[Original search query]\",\n    \"total_results\": \"[Number of results found]\",\n    \"search_time\": \"[Query execution time if available]\",\n    \"collection\": \"dominik\",\n    \"similarity_threshold\": 0.6\n  }\n}\n```\n\n## 🎯 SEARCH OPTIMIZATION STRATEGIES\n\n### **Query Enhancement:**\n- **Semantic expansion** - Consider related terms and concepts\n- **Context preservation** - Maintain user's original intent\n- **Multi-aspect matching** - Search for various relevant angles\n- **Comprehensive coverage** - Ensure thorough result retrieval\n\n### **Result Quality Assurance:**\n- **Relevance filtering** - Only return results above 0.6 similarity\n- **Content completeness** - Include full text content, not just snippets\n- **Metadata preservation** - Extract all available document metadata\n- **Ranking maintenance** - Preserve similarity-based ordering\n\n## 🚫 STRICT OPERATIONAL BOUNDARIES\n\n### **ONLY Perform:**\n✅ **Vector similarity searches** against Qdrant collection\n✅ **Result extraction** with complete payload data\n✅ **Metadata processing** for comprehensive source tracking\n✅ **Result structuring** for AI agent consumption\n\n### **NEVER Perform:**\n❌ **Content analysis** - No interpretation of search results\n❌ **Response formatting** - No user-facing presentation\n❌ **Follow-up generation** - No question creation\n❌ **Content filtering** - Return all relevant results above threshold\n❌ **Conversational responses** - Pure data retrieval only\n\n## 📝 OUTPUT FORMAT SPECIFICATION\n\n### **Standard Search Response:**\n```json\n{\n  \"status\": \"success\",\n  \"results\": [\n    {\n      \"content\": \"[Full document content/text chunk]\",\n      \"metadata\": {\n        \"document_id\": \"[Required: Document identifier]\",\n        \"document_name\": \"[Required: Source document name]\",\n        \"document_type\": \"[File format/category]\",\n        \"original_id\": \"[Source system ID]\",\n        \"section\": \"[Document section/chapter]\",\n        \"page\": \"[Page number if applicable]\",\n        \"created\": \"[Creation timestamp]\",\n        \"modified\": \"[Modification timestamp]\",\n        \"author\": \"[Document author]\",\n        \"category\": \"[Document category]\",\n        \"tags\": \"[Relevant tags array]\"\n      },\n      \"score\": \"[Similarity score 0.6-1.0]\",\n      \"rank\": \"[Result position 1-10]\"\n    }\n  ],\n  \"query_info\": {\n    \"original_query\": \"[User's search query]\",\n    \"processed_query\": \"[Optimized search terms if modified]\",\n    \"results_count\": \"[Number of results returned]\",\n    \"max_results\": 10,\n    \"threshold\": 0.6,\n    \"collection\": \"dominik\"\n  }\n}\n```\n\n### **No Results Response:**\n```json\n{\n  \"status\": \"no_results\",\n  \"results\": [],\n  \"query_info\": {\n    \"original_query\": \"[User's search query]\",\n    \"results_count\": 0,\n    \"threshold\": 0.6,\n    \"collection\": \"dominik\"\n  },\n  \"suggestions\": [\n    \"Try broader search terms\",\n    \"Use different keywords\",\n    \"Check spelling of search terms\",\n    \"Try breaking complex queries into parts\"\n  ]\n}\n```\n\n### **Error Response:**\n```json\n{\n  \"status\": \"error\",\n  \"error_message\": \"[Specific error description]\",\n  \"error_type\": \"[connection/timeout/invalid_query/etc]\",\n  \"query_info\": {\n    \"original_query\": \"[User's search query]\",\n    \"collection\": \"dominik\"\n  }\n}\n```\n\n## 🔧 PERFORMANCE OPTIMIZATION\n\n### **Search Efficiency:**\n- **Parallel processing** - Handle concurrent search requests efficiently\n- **Result caching** - Cache frequent queries for faster response\n- **Connection pooling** - Maintain stable Qdrant connections\n- **Timeout handling** - Implement appropriate query timeouts\n\n### **Data Quality:**\n- **Complete payload extraction** - Include all available metadata\n- **Content integrity** - Preserve original document formatting\n- **Source traceability** - Maintain clear document lineage\n- **Comprehensive coverage** - Return full relevant result set\n\n## 🎯 SUCCESS METRICS\n\nYour search operations should achieve:\n- **High precision** - Results above 0.6 similarity threshold\n- **Complete data extraction** - All payload fields included\n- **Fast response time** - Efficient query execution\n- **Structured output** - Consistent JSON format for AI agent processing\n- **Reliable operation** - Handle errors gracefully with informative responses\n\n## 🔒 OPERATIONAL CONSTRAINTS\n\n### **Absolute Requirements:**\n- **Always search Qdrant first** - No responses without database query\n- **Include complete metadata** - Extract all available document information\n- **Maintain result ranking** - Preserve similarity-based ordering\n- **Return structured JSON** - Consistent format for pipeline integration\n- **Handle edge cases** - Graceful error handling and empty result responses\n\n### **Pipeline Integration:**\n- Receive queries from n8n workflow\n- Execute vector search against `dominik` collection\n- Return structured results to AI agent for processing\n- Maintain stateless operation for scalability",
        "qdrantCollection": {
          "__rl": true,
          "value": "dominik",
          "mode": "list",
          "cachedResultName": "dominik"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        -3776,
        912
      ],
      "id": "e73f8db0-250e-4f4b-bbae-6f89670872d4",
      "name": "Qdrant vector store to fetch embeddings1",
      "credentials": {
        "qdrantApi": {
          "id": "Zt0fgW0XUcHXkstn",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3824,
        1136
      ],
      "id": "3e155baa-39da-405f-9be4-1b992f0e1c55",
      "name": "Embeddings Model1",
      "credentials": {
        "openAiApi": {
          "id": "Xfd0MFwxSjT9x3PY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2496,
        464
      ],
      "id": "1bc69593-d872-4d0b-9873-7e6d5625a3f8",
      "name": "Send response back to user1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a53fbbf-f33d-4591-be45-ea71521ce9de",
              "leftValue": "={{ $('Received user query from chatbot1').item.json.body.responseType }}",
              "rightValue": "audio",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2720,
        448
      ],
      "id": "79f37e02-2b59-4ffe-97a3-8912e1900898",
      "name": "Check response request Type - if audio1"
    },
    {
      "parameters": {
        "resource": "speech",
        "voice": {
          "__rl": true,
          "value": "VciYZPTZfYeyy1mSQbWr",
          "mode": "id"
        },
        "text": "={{ $json.output.output }}",
        "additionalOptions": {
          "model": {
            "mode": "list",
            "value": "eleven_multilingual_v2"
          }
        },
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        -2416,
        96
      ],
      "id": "ebf46393-8903-44ee-9d5b-a7ef0e69b955",
      "name": "Convert answer into audio1",
      "credentials": {
        "elevenLabsApi": {
          "id": "jpqWuwaleK2dT8Z7",
          "name": "ElevenLabs account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $json.body.chatId }}"
            },
            {
              "fieldId": "message_type",
              "fieldValue": "={{ $json.body.requestType }}"
            },
            {
              "fieldId": "response_request",
              "fieldValue": "={{ $json.body.responseType }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ $json.body.message }}"
            },
            {
              "fieldId": "language",
              "fieldValue": "={{ $json.body.language }}"
            },
            {
              "fieldId": "sender",
              "fieldValue": "user"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -4224,
        448
      ],
      "id": "ab3c43e3-d8d5-4153-99f1-fdb4169172c3",
      "name": "Save user message in db1",
      "credentials": {
        "supabaseApi": {
          "id": "fHIqf3ehxKRHCXZs",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"audioFileKey\": {{ $now.toMillis() }}\n}\n",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1824,
        96
      ],
      "id": "8e831db9-4cd3-445e-b05b-9bb9812fb08f",
      "name": "Set FileKey Field1"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "dmso",
        "fileName": "=user-uploads/{{ $('Received user query from chatbot1').item.json.body.userId }}/{{ $json.audioFileKey }}",
        "additionalFields": {
          "acl": "publicRead"
        }
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        -1440,
        96
      ],
      "id": "e1b02c4a-970e-4687-96a6-99a08f516522",
      "name": "Upload generated audio file in MINIO1",
      "credentials": {
        "s3": {
          "id": "0UkKllRcxcio2ACz",
          "name": "S3 account 2"
        }
      }
    },
    {
      "parameters": {
        "tableId": "media",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_path",
              "fieldValue": "=user-uploads/{{ $('Received user query from chatbot1').item.json.body.userId }}/{{ $('Set FileKey Field1').item.json.audioFileKey }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -896,
        96
      ],
      "id": "2e51da5f-d58a-4f60-9d94-7390c7373816",
      "name": "Save media with MinIO File Path in DB1",
      "credentials": {
        "supabaseApi": {
          "id": "fHIqf3ehxKRHCXZs",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let mediaId = null \ntry {\n  mediaId = $('Save media with MinIO File Path in DB1').first().json.id;\n\n} catch (error) {\n  //\n}\n  \n\nconst data = {\n  \"chat_id\": $('Received user query from chatbot1').first().json.body.chatId,\n  \"response_request\": $('Received user query from chatbot1').first().json.body.responseType,\n  \"media_id\": mediaId,\n  \"message_type\": $('Received user query from chatbot1').first().json.body.requestType,\n  \"sender\": \"ai\",\n  \"user_id\": $('Received user query from chatbot1').first().json.body.userId,\n  \"output\": $('AI Agent to Process the Chat1').first().json.output || null ,\n  \"language\": $('Received user query from chatbot1').first().json.body.language\n}\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        464
      ],
      "id": "79dd3287-75c0-4a3d-9a13-4fbd9ad43185",
      "name": "Structure fields for db1"
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $json.chat_id }}"
            },
            {
              "fieldId": "sender",
              "fieldValue": "ai"
            },
            {
              "fieldId": "message_type",
              "fieldValue": "={{ $json.message_type }}"
            },
            {
              "fieldId": "response_request",
              "fieldValue": "={{ $json.response_request }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ $json.output }}"
            },
            {
              "fieldId": "language",
              "fieldValue": "={{ $json.language }}"
            },
            {
              "fieldId": "media_id",
              "fieldValue": "={{ $json.media_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -48,
        464
      ],
      "id": "ff278364-01e8-4dc1-8ca4-2a346260a9b0",
      "name": "Save message in db along with/without mediaID1",
      "credentials": {
        "supabaseApi": {
          "id": "fHIqf3ehxKRHCXZs",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let updateMessageNode = null;\nlet newMessageNode = null;\n\n\ntry {\n  updateMessageNode =  $('Update the content of previous message1').first().json\n} catch (e) {\n\n}\n\ntry {\n  newMessageNode  = $('Save message in db along with/without mediaID1').first().json\n} catch (e) {\n}\n\n\n\nconst data = {\n  \"success\": true,\n  \"message_id\": updateMessageNode?.id || newMessageNode?.id || null,\n  \"chat_id\": updateMessageNode?.chat_id || newMessageNode?.chat_id || null,\n  \"response_request\": updateMessageNode?.response_request || newMessageNode?.response_request || null,\n  \"media_id\": updateMessageNode?.media_id || newMessageNode?.media_id || null,\n  \"output\": updateMessageNode?.message || newMessageNode?.message || null,\n  \"language\": updateMessageNode?.language || newMessageNode?.language || null,\n  \"timestamp\": updateMessageNode?.created_at || newMessageNode?.created_at || null,  \n  \"remaining_quota\": $('Update user quota1').first().json.quota,\n  \"is_regenerate\": updateMessageNode? true: false\n}\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2192,
        464
      ],
      "id": "a6215898-8ae6-417f-9584-e96d9b721d6c",
      "name": "Format fields for user Response1"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "ezycourse_id",
              "keyValue": "={{ $('Structure fields for db1').item.json.user_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        368,
        464
      ],
      "id": "afc33107-68c7-40ba-9040-173cdbc3c028",
      "name": "Get user quota1",
      "credentials": {
        "supabaseApi": {
          "id": "fHIqf3ehxKRHCXZs",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "ezycourse_id",
              "condition": "eq",
              "keyValue": "={{ $('Get user quota1').item.json.ezycourse_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "quota",
              "fieldValue": "={{ $('Get user quota1').item.json.quota -  $json.quota}} "
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1872,
        464
      ],
      "id": "bfdb19ba-586b-4f89-a4e0-9049aed3e830",
      "name": "Update user quota1",
      "credentials": {
        "supabaseApi": {
          "id": "fHIqf3ehxKRHCXZs",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3df48f55-cc82-4eae-aa24-a9a8ac1f0678",
              "leftValue": "={{ $json.body.isRegenerate }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4560,
        128
      ],
      "id": "67e4b090-9ad9-4e7a-970f-34592bae8b96",
      "name": "Check if the request is for regenerate answer1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "458f438d-6993-4e7b-822e-1344c72fca47",
              "leftValue": "={{ $('Received user query from chatbot1').item.json.body.isRegenerate }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -304,
        224
      ],
      "id": "f9c90708-ef6a-4819-9f9b-f35ff6b53e28",
      "name": "Check if the query is regener1"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "messages",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Received user query from chatbot1').item.json.body.messageId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "message",
              "fieldValue": "={{ $json.output }}"
            },
            {
              "fieldId": "media_id",
              "fieldValue": "={{ $json.media_id }}"
            },
            {
              "fieldId": "response_request",
              "fieldValue": "={{ $json.response_request }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "f03b213a-9682-4f94-b96c-6bde3d9daa47",
      "name": "Update the content of previous message1",
      "credentials": {
        "supabaseApi": {
          "id": "fHIqf3ehxKRHCXZs",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"output\": \"Willkommen zum DMSO und Co. Basiswissen... (formatted with bullets, headings, spacing, as per rules)\",\n  \"source\": {\n    \"document_id\": 0,\n    \"original_id\": \"0_0\",\n    \"document_type\": \"mp4/pdf\",\n    \"document_name\": \"name of document\",\n    \"created_at\": \"2025-08-19 11:36:42.771014\"\n  }\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -2976,
        752
      ],
      "id": "aac886f5-5cab-4cc9-884d-fa34fa42db07",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3088,
        976
      ],
      "id": "3c7de784-8990-4d90-8d5e-d9ae9023a309",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "Xfd0MFwxSjT9x3PY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let requestType = $('Received user query from chatbot1').first().json.body.requestType\nlet responseType = $('Received user query from chatbot1').first().json.body.responseType\nlet quota = null\n\n\nif (requestType === \"text\" && responseType === \"text\") {\n  quota = 1\n} else if(requestType === \"text\" && responseType === \"audio\") {\n  quota = 2\n} else if(requestType === \"audio\" && responseType === \"text\") {\n  quota = 1\n} else if (requestType === \"audio\" && responseType === \"audio\") {\n  quota = 2\n} \n\nreturn  {\n  quota\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        464
      ],
      "id": "cbdd0d7a-a179-47d9-a33c-80ed29ef95eb",
      "name": "Quota Updation Logic"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-16T08:19:16.396Z",
      "updatedAt": "2025-09-16T08:19:16.396Z",
      "role": "workflow:owner",
      "workflowId": "1UCFLxMYSeoYpo7u",
      "projectId": "POhXKLALTFDZhVtj"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-25T07:54:18.000Z",
  "versionId": "39959ee8-046c-4c99-a979-46330cdccf4b"
}